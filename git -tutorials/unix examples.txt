programming and scripting languages have some sort of if/else expression and so does the bourne shell. Unlike most other languages, spaces are very important when using an if statement. Let's do a simple script that will ask a user for a password before allowing him to continue. This is obviously not how you would implement such security in a real system, but it will make a good example of using if and else statements.

#!/bin/sh
# This is some secure program that uses security.

VALID_PASSWORD="secret" #this is our password.

echo "Please enter the password:"
read PASSWORD

if [ "$PASSWORD" == "$VALID_PASSWORD" ]; then
	echo "You have access!"
else
	echo "ACCESS DENIED!"
fi

Remember that the spacing is very important in the if statement. Notice that the termination of the if statement is fi. You will need to use the fi statement to terminate an if whether or not use use an else as well. You can also replace the "==" with "!=" to test if the variables are NOT equal. There are other tokens that you can put in place of the "==" for other types of tests. The following table shows the different expressions allowed.
Comparisons:
-eq	equal to
-ne	not equal to
-lt	less than
-le	less than or equal to
-gt	greater than
-ge	greater than or equal to

File Operations:
-s	file exists and is not empty
-f	file exists and is not a directory
-d	directory exists
-x	file is executable
-w	file is writable
-r	file is readable

Let's try using a couple of these in a script. This next script will ask for a user name, if there is not a file that exists with the name "username_DAT", the script will prompt the user for their age, it will then make sure that they are old enough to use this program and then it will write their age to a file with the name "username_DAT". If the file already exists, it will just display the age of the user.

#!/bin/sh

# Prompt for a user name...
echo "Please enter your name:"
read USERNAME

# Check for the file.
if [ -s ${USERNAME}_DAT ]; then
        # Read the age from the file.
        AGE=`cat ${USERNAME}_DAT`
        echo "You are $AGE years old!"
else
        # Ask the user for his/her age
        echo "How old are you?"
        read AGE

	if [ "$AGE" -le 2 ]; then
		echo "You are too young!"
	else
		if [ "$AGE" -ge 100 ]; then
			echo "You are too old!"
		else
        		# Write the age to a new file.
        		echo $AGE > ${USERNAME}_DAT
        	fi
        fi
fi

Run this program a couple of times. First run it and give it the user name of "john". When it asks for an age, enter the age "1". Notice that it will say that you are too you and then exit. Now run the program again with the name "john" and the age 200. This time the script will tell you that you are too old and exit. Now run the the script again with the name of "john", enter the age 30. The script exits normally this time, the program created a file called "john_DAT" which contains the text "30". Finally run the program one more time and give it the name "john". This time it will not prompt you to enter an age, instead it will read the age from a file and say "Your are 30 years old!".

We introduced something else new in this script. On line 10 of the file, we see the code:

	AGE=`cat ${USERNAME}_DAT`

This is how you execute a command and put the text output from the command into a variable. The unix command cat reads the file named ${USERNAME}_DAT and outputs it to the console. Instead of putting it to the console in our script, we wrap the command with the character `, this puts the text into our variable AGE.

You can test multiple expressions at once by using the || (or) operator or the && (and) operator. This can save you from writing extra code to nest if statements. The above code has a nested if statement where it checks if the age is greater than or equal to 100. This could be changed as well by using elif (else if). The structure of elif is the same as the structure of if, we will use it in an example below. In this example, we will check for certain age ranges. If you are less than 20 or greater than 50, you are out of the age range. If you are between 20 and 30 you are in your 20's and so on.

#!/bin/sh

# Prompt for a user name...
echo "Please enter your age:"
read AGE

if [ "$AGE" -lt 20 ] || [ "$AGE" -ge 50 ]; then
	echo "Sorry, you are out of the age range."
elif [ "$AGE" -ge 20 ] && [ "$AGE" -lt 30 ]; then
	echo "You are in your 20s"
elif [ "$AGE" -ge 30 ] && [ "$AGE" -lt 40 ]; then
	echo "You are in your 30s"
elif [ "$AGE" -ge 40 ] && [ "$AGE" -lt 50 ]; then
	echo "You are in your 40s"
fi



here are various operators supported by each shell. We will discuss in detail about Bourne shell (default shell) in this chapter.

We will now discuss the following operators −

    Arithmetic Operators
    Relational Operators
    Boolean Operators
    String Operators
    File Test Operators

Bourne shell didn't originally have any mechanism to perform simple arithmetic operations but it uses external programs, either awk or expr.

The following example shows how to add two numbers −
Live Demo

#!/bin/sh

val=`expr 2 + 2`
echo "Total value : $val"

The above script will generate the following result −

Total value : 4

The following points need to be considered while adding −

    There must be spaces between operators and expressions. For example, 2+2 is not correct; it should be written as 2 + 2.

    The complete expression should be enclosed between ‘ ‘, called the backtick.

Arithmetic Operators

The following arithmetic operators are supported by Bourne Shell.

Assume variable a holds 10 and variable b holds 20 then −

Show Examples
Operator 	Description 	Example
+ (Addition) 	Adds values on either side of the operator 	`expr $a + $b` will give 30
- (Subtraction) 	Subtracts right hand operand from left hand operand 	`expr $a - $b` will give -10
* (Multiplication) 	Multiplies values on either side of the operator 	`expr $a \* $b` will give 200
/ (Division) 	Divides left hand operand by right hand operand	`expr $b / $a` will give 2
% (Modulus) 	Divides left hand operand by right hand operand and returns remainder 	`expr $b % $a` will give 0
= (Assignment) 	Assigns right operand in left operand 	a = $b would assign value of b into a
== (Equality) 	Compares two numbers, if both are same then returns true. 	[ $a == $b ] would return false.
!= (Not Equality) 	Compares two numbers, if both are different then returns true. 	[ $a != $b ] would return true.

It is very important to understand that all the conditional expressions should be inside square braces with spaces around them, for example [ $a == $b ] is correct whereas, [$a==$b] is incorrect.

All the arithmetical calculations are done using long integers.
Relational Operators

Bourne Shell supports the following relational operators that are specific to numeric values. These operators do not work for string values unless their value is numeric.

For example, following operators will work to check a relation between 10 and 20 as well as in between "10" and "20" but not in between "ten" and "twenty".

Assume variable a holds 10 and variable b holds 20 then −

Show Examples
Operator 	Description 	Example
-eq 	Checks if the value of two operands are equal or not; if yes, then the condition becomes true. 	[ $a -eq $b ] is not true.
-ne 	Checks if the value of two operands are equal or not; if values are not equal, then the condition becomes true. 	[ $a -ne $b ] is true.
-gt 	Checks if the value of left operand is greater than the value of right operand; if yes, then the condition becomes true. 	[ $a -gt $b ] is not true.
-lt 	Checks if the value of left operand is less than the value of right operand; if yes, then the condition becomes true. 	[ $a -lt $b ] is true.
-ge 	Checks if the value of left operand is greater than or equal to the value of right operand; if yes, then the condition becomes true. 	[ $a -ge $b ] is not true.
-le 	Checks if the value of left operand is less than or equal to the value of right operand; if yes, then the condition becomes true. 	[ $a -le $b ] is true.

It is very important to understand that all the conditional expressions should be placed inside square braces with spaces around them. For example, [ $a <= $b ] is correct whereas, [$a <= $b] is incorrect.
Boolean Operators

The following Boolean operators are supported by the Bourne Shell.

Assume variable a holds 10 and variable b holds 20 then −

Show Examples
Operator 	Description 	Example
! 	This is logical negation. This inverts a true condition into false and vice versa. 	[ ! false ] is true.
-o 	This is logical OR. If one of the operands is true, then the condition becomes true. 	[ $a -lt 20 -o $b -gt 100 ] is true.
-a 	This is logical AND. If both the operands are true, then the condition becomes true otherwise false. 	[ $a -lt 20 -a $b -gt 100 ] is false.
String Operators

The following string operators are supported by Bourne Shell.

Assume variable a holds "abc" and variable b holds "efg" then −

Show Examples
Operator 	Description 	Example
= 	Checks if the value of two operands are equal or not; if yes, then the condition becomes true. 	[ $a = $b ] is not true.
!= 	Checks if the value of two operands are equal or not; if values are not equal then the condition becomes true. 	[ $a != $b ] is true.
-z 	Checks if the given string operand size is zero; if it is zero length, then it returns true. 	[ -z $a ] is not true.
-n 	Checks if the given string operand size is non-zero; if it is nonzero length, then it returns true. 	[ -n $a ] is not false.
str 	Checks if str is not the empty string; if it is empty, then it returns false. 	[ $a ] is not false.
File Test Operators

We have a few operators that can be used to test various properties associated with a Unix file.

Assume a variable file holds an existing file name "test" the size of which is 100 bytes and has read, write and execute permission on −

Show Examples
Operator 	Description 	Example
-b file 	Checks if file is a block special file; if yes, then the condition becomes true. 	[ -b $file ] is false.
-c file 	Checks if file is a character special file; if yes, then the condition becomes true. 	[ -c $file ] is false.
-d file 	Checks if file is a directory; if yes, then the condition becomes true. 	[ -d $file ] is not true.
-f file 	Checks if file is an ordinary file as opposed to a directory or special file; if yes, then the condition becomes true. 	[ -f $file ] is true.
-g file 	Checks if file has its set group ID (SGID) bit set; if yes, then the condition becomes true. 	[ -g $file ] is false.
-k file 	Checks if file has its sticky bit set; if yes, then the condition becomes true. 	[ -k $file ] is false.
-p file 	Checks if file is a named pipe; if yes, then the condition becomes true. 	[ -p $file ] is false.
-t file 	Checks if file descriptor is open and associated with a terminal; if yes, then the condition becomes true. 	[ -t $file ] is false.
-u file 	Checks if file has its Set User ID (SUID) bit set; if yes, then the condition becomes true. 	[ -u $file ] is false.
-r file 	Checks if file is readable; if yes, then the condition becomes true. 	[ -r $file ] is true.
-w file 	Checks if file is writable; if yes, then the condition becomes true. 	[ -w $file ] is true.
-x file 	Checks if file is executable; if yes, then the condition becomes true. 	[ -x $file ] is true.
-s file 	Checks if file has size greater than 0; if yes, then condition becomes true. 	[ -s $file ] is true.
-e file 	Checks if file exists; is true even if file is a directory but exists. 	[ -e $file ] is true.
